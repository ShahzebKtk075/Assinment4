# -*- coding: utf-8 -*-
"""Assinment4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iI2NPw8kw1PGKDg-gBbqBoauoIHFJtFi
"""

# Question 1: Insertion Sort Function__
# Write a Python function insertion_sort(arr) that sorts a list of integers using the insertion sort algorithm.
# Demonstrate the working of this function with an example list.

original_list = [9, 3, 1, 5, 4]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]  # Element to be inserted
        j = i - 1
        # Move elements of arr[0..i-1], that are greater than key, to one position ahead
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]  # Shift element to right
            j -= 1
        arr[j + 1] = key  # Place key at correct position
    return arr

print("Original List:", original_list)
sorted_list = insertion_sort(original_list)
print("Sorted List:", sorted_list)

#Q2:

def insertion_sort(students):
    for i in range(1, len(students)):
        key = students[i]
        j = i - 1
        # Sort by marks in descending order
        while j >= 0 and students[j][1] < key[1]:
            students[j + 1] = students[j]
            j -= 1
        students[j + 1] = key
    return students

# Input: List of students
students = []

# We will take exactly 10 inputs for students
num_students_to_collect = 10

print(f"Enter details for {num_students_to_collect} students:")

for _ in range(num_students_to_collect):
    name = input("Enter student name: ")
    marks = float(input("Enter student marks: "))
    students.append((name, marks))

# Sort students by marks
sorted_students = insertion_sort(students)

# Display top 3 performers
print("\nðŸŽ“ Top 3 Performers:")
for i in range(min(3, len(sorted_students))):
    print(f"{i+1}. {sorted_students[i][0]} - {sorted_students[i][1]}")

# Q3:

def calculate_unit_charge(units):
    if units <= 100:
        return units * 9.43
    elif units <= 200:
        return (100 * 9.43) + (units - 100) * 10.29
    elif units <= 300:
        return (100 * 9.43) + (100 * 10.29) + (units - 200) * 12.43
    elif units <= 400:
        return (100 * 9.43) + (100 * 10.29) + (100 * 12.43) + (units - 300) * 14.43
    elif units <= 500:
        return (100 * 9.43) + (100 * 10.29) + (100 * 12.43) + (100 * 14.43) + (units - 400) * 16.43
    elif units <= 600:
        return (100 * 9.43) + (100 * 10.29) + (100 * 12.43) + (100 * 14.43) + (100 * 16.43) + (units - 500) * 18.43
    elif units <= 700:
        return (100 * 9.43) + (100 * 10.29) + (100 * 12.43) + (100 * 14.43) + (100 * 16.43) + (100 * 18.43) + (units - 600) * 20.43
    else:
        return (100 * 9.43) + (100 * 10.29) + (100 * 12.43) + (100 * 14.43) + (100 * 16.43) + (100 * 18.43) + (100 * 20.43) + (units - 700) * 22.43

def calculate_bill(units, tv_count):
    # Charges
    electricity_charges = calculate_unit_charge(units)
    duty = electricity_charges * 0.015
    tv_fees = tv_count * 35
    fuel_cost = units * 3.7

    # Pre-tax total
    pre_tax_total = electricity_charges + duty + tv_fees + fuel_cost

    # Sales tax (only if pre-tax total > 25,000)
    sales_tax = 0
    if pre_tax_total > 25000:
        sales_tax = pre_tax_total * 0.075

    # Final bill
    total_bill = pre_tax_total + sales_tax

    return {
        "Electricity Charges": round(electricity_charges, 2),
        "Electricity Duty": round(duty, 2),
        "TV Fees": round(tv_fees, 2),
        "Fuel Cost": round(fuel_cost, 2),
        "Sales Tax": round(sales_tax, 2),
        "Total Bill": round(total_bill, 2)
    }

# ----- INPUT -----
units = int(input("Enter units consumed: "))
tv_count = int(input("Enter number of televisions: "))

# ----- CALCULATION -----
bill = calculate_bill(units, tv_count)

# ----- OUTPUT -----
print("\nðŸ“‹ Monthly Electricity Bill:")
for key, value in bill.items():
    print(f"{key}: Rs. {value}")

#Q4:

def EUTOS(basophil_percent, spleen_size):
    return 7 * basophil_percent + 4 * spleen_size

# Input with validation
def get_valid_input(prompt, min_val, max_val):
    while True:
        try:
            value = float(input(prompt))
            if min_val <= value <= max_val:
                return value
            else:
                print(f"Please enter a value between {min_val} and {max_val}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

# Get validated inputs
basophil = get_valid_input("Enter basophil percentage (0-25): ", 0, 25)
spleen = get_valid_input("Enter spleen size (0-40): ", 0, 40)

# Calculate EUTOS score
score = EUTOS(basophil, spleen)

# Output result
print(f"\n EUTOS Score: {score}")
if score > 87:
    print("ðŸ”´ Risk Level: High Risk")
else:
    print("ðŸŸ¢ Risk Level: Low Risk")